This example demonstartes the use of gdb and multithreading

to execute :
gcc -g -pthread multithreaded.c


gdb ./a.out 
GNU gdb (Ubuntu 7.9-1ubuntu1) 7.9
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) r
Starting program: /home/arun/projects/gdb/threads/a.out 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

 Thread created successfully

 First thread processing

 Thread created successfully
[New Thread 0x7ffff6fef700 (LWP 7317)]
[New Thread 0x7ffff77f0700 (LWP 7316)]

Program received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff6fef700 (LWP 7317)]
0x000000000040081e in doSomeThing (arg=0x0) at multithreaded.c:20
20	        *(int *)0=0;
(gdb) bt
#0  0x000000000040081e in doSomeThing (arg=0x0) at multithreaded.c:20
#1  0x00007ffff7bc26aa in start_thread (arg=0x7ffff6fef700) at pthread_create.c:333
#2  0x00007ffff78f7eed in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
(gdb) q
A debugging session is active.

	Inferior 1 [process 7312] will be killed.



